/**
 * Responsive Font Sizes v8.0.4
 * https://github.com/twbs/rfs
 * https://github.com/twbs/rfs/blob/main/LICENSE
 */

// Mixins
// Adapted from:
// https://github.com/twbs/rfs/blob/v8.0.4/scss.scss

// Internal mixin that adds disable classes to the selector if needed.
@mixin _rfs-disable-class {
  @if $rfs-class == "disable" {
    // Adding an extra class increases specificity, which prevents the media query to override the font size
    &,
    .disable-responsive-font-size &,
    &.disable-responsive-font-size {
      @content;
    }
  }
  @else {
    @content;
  }
}

// Internal mixin that adds enable classes to the selector if needed.
@mixin _rfs-enable-class {
  @if $rfs-class == "enable" {
    .enable-responsive-font-size &,
    &.enable-responsive-font-size {
      @content;
    }
  }
  @else {
    @content;
  }
}

// Internal mixin used to determine which media query needs to be used
@mixin _rfs-media-query($mq-value) {
  @if $rfs-two-dimensional {
    @media (max-width: #{$mq-value}), (max-height: #{$mq-value}) {
      @content;
    }
  }
  @else {
    @media (max-width: #{$mq-value}) {
      @content;
    }
  }
}

// Responsive font size mixin
@mixin rfs($fs, $important: false) {
  // Cache $fs unit
  $fs-unit: if(type-of($fs) == "number", unit($fs), false);

  // Add !important suffix if needed
  $rfs-suffix: if($important, " !important", "");

  // If $fs isn't a number (like inherit) or $fs has a unit (not px or rem, like 1.5em) or $ is 0, just print the value
  @if not $fs-unit or $fs-unit != "" and $fs-unit != "px" and $fs-unit != "rem" or $fs == 0 {
    font-size: #{$fs}#{$rfs-suffix};
  }
  @else {
    // Remove unit from $fs for calculations
    @if $fs-unit == "px" {
      $fs: $fs / ($fs * 0 + 1);
    }
    @else if $fs-unit == "rem" {
      $fs: $fs / ($fs * 0 + 1 / $rfs-rem-value);
    }

    // Set default font size
    $rfs-static: if($rfs-font-size-unit == rem, #{$fs / $rfs-rem-value}rem, #{$fs}px);

    // Only add the media query if the font size is bigger than the minimum font size
    @if $fs <= $rfs-base-font-size or not $enable-responsive-font-sizes {
      font-size: #{$rfs-static}#{$rfs-suffix};
    }
    @else {
      // Calculate the minimum font size for $fs
      $fs-min: $rfs-base-font-size + ($fs - $rfs-base-font-size) / $rfs-factor;

      // Calculate difference between $fs and the minimum font size
      $fs-diff: $fs - $fs-min;

      // Base font-size formatting
      $min-width: if($rfs-font-size-unit == rem, #{$fs-min / $rfs-rem-value}rem, #{$fs-min}px);

      // Use `vmin` if two-dimensional is enabled
      $variable-unit: if($rfs-two-dimensional, vmin, vw);

      // Calculate the variable width between 0 and $rfs-breakpoint
      $variable-width: #{$fs-diff * 100 / $rfs-breakpoint}#{$variable-unit};

      // Set the calculated font-size
      $rfs-fluid: calc(#{$min-width} + #{$variable-width}) #{$rfs-suffix};

      // Breakpoint formatting
      $mq-value: if($rfs-breakpoint-unit == px, #{$rfs-breakpoint}px, #{$rfs-breakpoint / $rfs-rem-value}#{$rfs-breakpoint-unit});

      @include _rfs-disable-class {
        font-size: #{$rfs-static}#{$rfs-suffix};
      }

      @include _rfs-media-query($mq-value) {
        @include _rfs-enable-class {
          font-size: $rfs-fluid;
        }

        // Include safari iframe resize fix if needed
        min-width: if($rfs-safari-iframe-resize-bug-fix, (0 * 1vw), null);
      }
    }
  }
}

// The font-size & responsive-font-size mixins use RFS to rescale the font size
@mixin font-size($fs, $important: false) {
  @include rfs($fs, $important);
}

@mixin responsive-font-size($fs, $important: false) {
  @include rfs($fs, $important);
}
