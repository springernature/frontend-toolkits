@use 'sass:math';
/**
 * Return a greyscale color based on $context--greyscale-base
 *
 * @param {Integer} $val - lightness value between $context--greyscale-min and $context--greyscale-max
 * @param {Float} $opacity - opacity value between 0.1 and 1, to one decimal place
 *
 */

@function greyscale($val: $context--greyscale-min, $opacity: 1) {
	$opacity: math.div(round($opacity * 10), 10);
	$lightness: if($val < $context--greyscale-min, $context--greyscale-min, $val);
	$lightness: if($lightness > $context--greyscale-max, $context--greyscale-max, $lightness);
	$rounded: round(math.div($lightness, $context--greyscale-stops)) * $context--greyscale-stops;
	$color: lighten($context--greyscale-base, $rounded);

	@return rgba($color, $opacity);
}

/**
 * Return a color from a color palette
 *
 * @param {String} $name - name of the color to insert
 * @param {Arglist} $keys - 0 to 2 paramaters defining map and opacity
 *
 */

@function color($name, $keys...) {
	$v1: if(length($keys) > 0, nth($keys, 1), null);
	$v2: if(length($keys) > 1, nth($keys, 2), null);
	$map: if(type-of($v1) == 'map', $v1, $context--colors);
	$opacity: if(type-of($v1) == 'number', $v1, $v2);
	$opacity: if($opacity, math.div(round($opacity * 10), 10), 1); // round to one decimal place

	@if length($keys) > 2 {
		@warn 'the `color` function expects a maximum of 2 optional arguments, #{length($keys)} found.';
		@return false;
	}

	@if map-has-key($map, $name) {
		$color: map-get($map, $name);
		@return rgba($color, $opacity);
	}

	@warn 'color `#{$name}` does not exist';
	@return black;
}

/**
 * Returns either a dark or light foreground color when given the background color
 *
 * @param {Integer|String} $bgcolor - number for grays, string for colors
 * @param {Map} $map - the color map to use
 *
 */

@function foreground-color($bgcolor: 0, $map: $context--colors) {
	$bgcolor: if(type-of($bgcolor) == 'number', gray($bgcolor), $bgcolor);
	$bgcolor: if(type-of($bgcolor) == 'string', color($bgcolor, $map), $bgcolor);
	$bg-luma: luma($bgcolor);
	$c1-luma: luma($context--foreground-dark);
	$c2-luma: luma($context--foreground-light);
	$c1-diff: abs($bg-luma - $c1-luma);
	$c2-diff: abs($bg-luma - $c2-luma);

	@if $c1-diff > $c2-diff {
		@return $context--foreground-dark;
	}
	@else {
		@return $context--foreground-light;
	}
}

/**
 * Calculates the sRGB luma of a colour
 * @private
 *
 * @param {*} $c - Color value
 *
 * https://lnikki.la/articles/sass-better-colour-based-on-brightness/
 * http://robots.thoughtbot.com/closer-look-color-lightness
 *
 */

@function luma($c) {
	$-local-red: red(rgba($c, 1));
	$-local-green: green(rgba($c, 1));
	$-local-blue: blue(rgba($c, 1));

	@return (0.2126 * $-local-red +
	0.7152 * $-local-green +
	0.0722 * $-local-blue) / 255;
}
